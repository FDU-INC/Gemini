apt remove docker docker-engine docker.io containerd runc
apt update
apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
sudo apt install -y docker-ce=5:20.10.7~3-0~ubuntu-focal docker-ce-cli=5:20.10.7~3-0~ubuntu-focal containerd.io
apt-mark hold docker-ce

# install kubernetes
curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add - 
apt-add-repository "deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main"
apt install -y kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00
apt-mark hold kubeadm kubelet

curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
apt-get install helm=3.9.4-1

docker pull registry
docker run -d -p 5000:5000 --restart always --name registry registry:2

sudo apt install nginx -y

sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
sudo apt install virtinst

sudo apt install make
sudo apt install gcc
sudo apt install g++
sudo apt install libsctp-dev lksctp-tools
sudo apt install iproute2
sudo snap install cmake --classic

sudo apt install openvswitch-switch

# apt deb数据包
sudo cp -r /var/cache/apt/archives/ /var/www/html/
cd /var/www/html/archives
apt install dpkg-dev
sudo dpkg-scanpackages /var/www/html/archives|gzip -c9>Packages.gz


# 代码文件
mkdir /var/www/html/files
# cd /var/www/html/files
# wget https://releases.ubuntu.com/focal/ubuntu-20.04.6-live-server-amd64.iso
# wget https://github.com/OreoFroyo/UERANSIM_beforehandHO/archive/refs/heads/main.zip

# 配置文件
mkdir /var/www/html/config_files

## resource build successfully

# 宿主机-open5gs
echo "deb [trusted=yes] http://10.177.47.118/archives ./" | sudo tee -a /etc/apt/sources.list > /dev/null
apt update
sudo apt install openvswitch-switch
ovs-vsctl add-br br0
ovs-vsctl add-port br0 $network_card_name
ifconfig $network_card_name 0
dhclient br0

sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
sudo apt install virtinst
wget http://10.177.47.118/files/ubuntu-20.04.6-live-server-amd64.iso
virt-install \
  --name ground \
  --ram 2048 \
  --vcpus 2 \
  --os-variant ubuntu20.04 \
  --network bridge=br0,virtualport_type=openvswitch,mac=52:54:00:12:34:56 \
  --disk size=30,bus=virtio,format=qcow2,pool=default \
  --cdrom ubuntu-20.04.6-live-server-amd64.iso 

echo "<?xml version='1.0' encoding='utf-8'?>
<network>
  <name>br0_network</name>
  <forward mode='bridge'/>
  <bridge name='br0'/>
  <virtualport type='openvswitch'/>
</network>" > /etc/libvirt/qemu/networks/br0_network.xml

# ground虚拟机
echo 'net.bridge.bridge-nf-call-ip6tables = 1' > k8s.conf
echo 'net.bridge.bridge-nf-call-iptables = 1' >> k8s.conf
echo 'net.ipv4.ip_forward = 1' >> k8s.conf
echo 'vm.swappiness = 0' >> k8s.conf
modprobe br_netfilter
sysctl -p /etc/sysctl.d/k8s.conf

# install docker
apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
sudo apt install -y docker-ce=5:20.10.7~3-0~ubuntu-focal docker-ce-cli=5:20.10.7~3-0~ubuntu-focal containerd.io
apt-mark hold docker-ce

# install kubernetes
## master
apt install -y kubeadm=1.23.5-00 kubelet=1.23.5-00 kubectl=1.23.5-00
apt-mark hold kubeadm kubelet
apt install helm=3.9.4-1
wget https://192.168.136.130/open5gs.tar.gz

## node
apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
sudo apt install -y docker-ce=5:20.10.7~3-0~ubuntu-focal docker-ce-cli=5:20.10.7~3-0~ubuntu-focal containerd.io
apt-mark hold docker-ce
apt install -y kubeadm=1.23.5-00 kubelet=1.23.5-00
apt-mark hold kubeadm kubelet kubectl

docker pull registry.cn-hangzhou.aliyuncs.com/inclab/mongo
docker tag registry.cn-hangzhou.aliyuncs.com/inclab/mongo:latest mongo:5.0
docker pull registry.cn-hangzhou.aliyuncs.com/inclab/inc-core-newww
docker tag registry.cn-hangzhou.aliyuncs.com/inclab/inc-core-newww:latest oreofroyo/inc-core-newww:latest
docker pull registry.cn-hangzhou.aliyuncs.com/inclab/ogs-webui-2.4.8
docker tag regregistry.cn-hangzhou.aliyuncs.com/inclab/ogs-webui-2.4.8:latest naposto/ogs-webui-2.4.8:latest

//宿主机-gnb
echo "deb [trusted=yes] http://192.168.136.130/archives ./" | sudo tee -a /etc/apt/sources.list > /dev/null
sudo apt install openvswitch-switch
ovs-vsctl add-br br0
ovs-vsctl add-port br0 $network_card_name
ifconfig $network_card_name 0
dhclient br0

sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
sudo apt install virtinst
virt-install \
  --name ground \
  --ram 1024 \
  --vcpus 1 \
  --os-type hvm \
  --os-variant ubuntu20.04 \
  --network bridge=br0,mac=10 \
  --graphics none \
  --disk size=30G,bus=virtio,format=qcow2,pool=default \
  --cdrom ubuntu-20.04.6-live-server-amd64.iso

echo "<?xml version='1.0' encoding='utf-8'?>
<network>
  <name>br0_network</name>
  <forward mode='bridge'/>
  <bridge name='br0'/>
  <virtualport type='openvswitch'/>
</network>" > /etc/libvirt/qemu/networks/br0_network.xml

//在目标虚拟机上操作
echo "deb [trusted=yes] http://192.168.136.130/archives ./" | sudo tee -a /etc/apt/sources.list > /dev/null
sudo apt install make
sudo apt install gcc
sudo apt install g++
sudo apt install libsctp-dev lksctp-tools
sudo apt install iproute2
sudo snap install cmake --classic
wget http://192.168.136.130/files/main.zip
unzip main.zip
cd UERANSIM_beforehandHO-main
make

